General Idea: 

const swap = (arr, indx1, indx2) => {
  //swaps the indx1 with indx2 and indx2 with indx1
  [arr[indx1], arr[indx2]] = [arr[indx2], arr[indx1]] 
}

function pivot(arr, start=0, end= arr.length + 1){
  let pivot = arr[start];
  let swapIndex = start;
  for(let i = start+1; i < arr.length; i++){
    if(pivot > arr[i]){
      swapIndex++; //starts at 0 and adds when theres a value less than pivot num
      swap(arr, swapIndex, i) //swaps whatever number is less than pivot by the swapIndex
    }
  }
  swap(arr, start, swapIndex)
  return swapIndex;
}

function quickSort(arr, left = 0, right = arr.length - 1){
  if(left < right){
    let pivotIndex = pivot(arr, left, right)
    //left
    quickSort(arr, left, pivotIndex - 1)
    //right
    quickSort(arr, pivotIndex + 1, right)
  }
  return arr;
}

Time Comp: O(n log n)
Worst case: if the data is already sorted then it will be quadratic time (On^2)
Space Comp: O(n)
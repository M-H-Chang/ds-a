A process (function) that calls itself.

Why it's important:
- It's everywhere

Call stack: a data structure that tells us when each function should be called.
- Any time a function is invoked it is pushed on the top of the call stack
- When JS sees the return keyword or when the function ends, the compiler will remove it from the call stack

Two Essential parts:
- Base case: when the recursion stops
- Different output: changing the output so you pass it through the function again

Example:
function sumRange(num) {
  if(num === 1) return 1;   // base case 
  return num + sumRange(num - 1);   //Different Output 
}

walk through:

sumRange(3)
    return 3 + sumRange(3 - 1) /
                  return 2 + sumRange(2 - 1) 
                                  return 1 // reaches basecase
                  return 2 + 1 // sumRange(2) = 3
    return 3 + 3 //sumRange(3) = 3    
returns 6


Factorial recursively:

Factorial = 4! = 4*3*2*1

function factorial(num) {
  if (num === 1) return 1;
  return num *= factorial(num - 1)
}

Helper method recursion design:
function collectOddValues(arr) {
  let result = [];
  ------------ begin of helper ------------
  function helperMethod(diffArr) {
    if(diffArr.length === 0) return;
    if(diffArr[0] % 2 !== 0) {
      result.push(diffArr[0])
    }
    helperMethod(diffArr.slice(1))
  }
  ------------ end of helper ------------
  helperMethod(arr)
  return result;
}

Practice:
function power(base, exp) {
  if(exp === 0) return 1;
  return base * power(base, exp - 1) 
}


function productOfArray(arr) {
  if(arr.length === 0)  return 1;
  return arr[0] * productOfArray(arr.slice(1))
}

function recursiveRange(num) {
  if(num === 1) return 1;
  return num + recursiveRange(num - 1)
}

function fib(num) {
  if(num <= 2) return 1;
  return fib(num - 1) + fib(num - 2);
}

fib(4)
fib(3) + 1 
fib(3-1 = 2) + fib(3 - 2)
1 + 1 2


fib(6)
fib(5)                      +                                         fib(4)
fib(4)          +           fib(3)                                     fib(3) + 1
fib(3) + 1                  1 + 1                                       1 + 1
1+1
         

Harder Recursion Problems:

function reverse(str) {
  let result = [];
  let splitStr = str.split('')
  function helperReverse(diffStr) {
    if(diffStr.length === 0) return;
    result.push(diffStr[diffStr.length - 1])
    helperReverse(diffStr.pop())
  }
  helperReverse(splitStr)
  return result.join('')
}

 ** Attempted
 
 
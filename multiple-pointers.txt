Example:
Write a function called sumZero which accepts a sorted array of integers. The function should find the first pair where the sum is 0. Return an array that includes both values that sum to zero or undefined if a pair does not exist.

Brute force method:
function sumZero(arr) {
  for (let i = 0; i < arr.length; i++) {
    for (let j = i+1; j < arr.length; j++) {
      if(arr[i] + arr[j] === 0) {
        return [arr[i], arr[j]];
      }
    }
  }
}

Time complexity: O(n^2)
space complexity: O(1)

Refactored:
function sumZero(arr) {
  let left = 0;
  let right = arr.length - 1
  while(left < right){
    let sum = arr[left] + arr[right];
    if(sum === 0){
      return [arr[left], arr[right]]
    } else if (sum > 0) {
      right--
    } else {
      left++
    }
  }
}

 Time complexity: O(n)
 space complexity: O(1)

 Practice example:
 Implement a function called countUniqueValues, which accepts a sorted array, and counts the unique values in the array. There can be negative numbers in the array, but it will always be sorted.

 Examples: 
 countUniqueValues([1,1,1,1,1,2]) //2
 countUniqueValues([1,2,3,4,5,5,7,7,12,12,13]) //7

 Clarifying questions:
 What if there is an empty index of the array for example a space?
 Will there every be a letter associated in the array?

 Steps:
 1. Gather two pointers the first would be the first index = 0
The second pointer would be array.length - 1
2. Use a loop and since there are two pointers.
3. Compare the two pointers to see if they are unique.
4. If they are unique we will have a counter to add to when unique values are found.

countUniqueValues(arr) {
   if (arr.length === 0) {
    return 0;
    }
  let i = 0
  for (let j = 1; j < arr.length; j++) {
    if (arr[i] !== arr[j]) {
      i++
      arr[i] = arr[j]
    }
  }
  return i += 1
}

function areThereDuplicates(...args) {
  // Two pointers
  args.sort((a,b) => a > b);
  let start = 0;
  let next = 1;
  while(next < args.length){
    if(args[start] === args[next]){
        return true
    }
    start++
    next++
  }
  return false
}

function averagePair(arr, targ) {
  let left = 0;
  let right = arr.length - 1;
  while(right > left) {
    if((arr[left] + arr[right]) / 2 === targ) {
      return true;
    }
    if((arr[left] + arr[right]) / 2 < targ) {
      left++;
    } 
    if((arr[left] + arr[right]) / 2 > targ) {
      right--;
    } 
  } 
  return false;
}

function isSubsequence(str, subStr) {
  let first = 0;
  let second = 0;
  if (subStr.length < str.length) {
    return false;
  }
  while(second < subStr.length) {
    if(str[first] === subStr[second]) {
      first++
      second++
    }
    if(str[first] !== subStr[second]) {
      second++
    }
    if(first === str.length) {
      return true
    }
  }
  return false;
}






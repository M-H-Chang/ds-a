Intro:
- Each element in a single linked list is referred to as a node.
- A node points unidirectional it to the next one so if you want to access the middle you have to go through all of them until the middle
- Ordered data

Better for:
- insertion and deletion

Starter code:
// skeleton for the node
class Node {
  constructor(val) {
    this.val = val;
    this.next = null;
  }
}

class SinglyLinkedList{
  constructor(){
    this.head = null;
    this.tail = null;
    this.length = 0;
  }
  push(val){
    let newNode = new Node(val)
    if(!this.head) {
      this.head = newNode;
      this.tail = this.head;
    } else {
      this.tail.next = newNode;
      this.tail = newNode;
    }
    this.length++
    return this;
  }
  // remove from the end
  pop(){
    if(!this.head) return undefined;
    let current = this.head;
    let newTail = current;
    while(current.next){
      newTail = current;
      current = current.next;
    }
    this.tail = newTail; //accessing the SinglyLinkedList obj and setting this.tail to the newTail
    this.tail.next = null;
    this.length--
    if(this.length === 0) {
      this.head = null;
      this.tail = null;
    }
    return current; //returning whatever we popped
  } 
  // remove from the beginning
  shift() {
    if (this.length === 0) return undefined;
    let current = this.head;
    this.head = current.next;
    this.length--
    return current;
  }
  // add a new node to the beginning of the SinglyLinkedList
  unshift(val) {
    let newNode = new Node(val)
    if(!this.head) {
      this.head = newNode;
      this.tail = newNode;
    } else {
      newNode.next = this.head; // gives us the connection between the new node to the existing node
      this.head = newNode;
    }
    this.length++
    return this;
  }
  //retrieving a node by its position in a linked list
  get(index){
    if(index < 0 || index >= this.length) return null;
    let counter = 0;
    let current = this.head; //current is the first node 
    while(counter !== index){
      current = current.next;
      counter++;
    }
    return current;
  }
  //chaning the value of the node in a singly linked list
  set(index, val){
    let changeVal = this.get(index)
    if(changeVal){ //if it is a found node
      changeVal.val = val;
      return true;
    } else {
      return false;
    }
  }
  //inserting a new node in the position specified
  insert(index, val){
    if(index > 0 || index > this.length) return false;
    else if(index === 0) unshift(val)
    else if(index === this.length) push(val)
    else 
  }
}

